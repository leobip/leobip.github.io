<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-09-10T18:09:18+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">My Personal Page</title><subtitle>A digital journey into my professional career &amp; projects</subtitle><author><name>Leoncio López</name><email>leobip27@gmail.com</email></author><entry><title type="html">Post Init</title><link href="http://localhost:4000/post-init/" rel="alternate" type="text/html" title="Post Init" /><published>2025-08-28T00:00:00+02:00</published><updated>2025-08-28T00:00:00+02:00</updated><id>http://localhost:4000/post-init</id><content type="html" xml:base="http://localhost:4000/post-init/"><![CDATA[<h1 id="hola--este-es-mi-primer-post-en-jekyll-con-el-tema-minimal-mistakes">Hola 👋, este es mi <strong>primer post</strong> en Jekyll con el tema <em>Minimal Mistakes</em></h1>

<p>Estoy probando cómo se ve el <strong>banner global</strong> y cómo se muestra en los posts.</p>]]></content><author><name>Leoncio López</name><email>leobip27@gmail.com</email></author><summary type="html"><![CDATA[Hola 👋, este es mi primer post en Jekyll con el tema Minimal Mistakes]]></summary></entry><entry><title type="html">Local Monitoring Stack for Kubernetes</title><link href="http://localhost:4000/local-monitoring-env/" rel="alternate" type="text/html" title="Local Monitoring Stack for Kubernetes" /><published>2025-07-26T18:32:04+02:00</published><updated>2025-07-26T18:32:04+02:00</updated><id>http://localhost:4000/local-monitoring-env</id><content type="html" xml:base="http://localhost:4000/local-monitoring-env/"><![CDATA[<h1 id="-local-monitoring-stack-for-kubernetes-prometheus--grafana--kafka">📡 Local Monitoring Stack for Kubernetes (Prometheus + Grafana + Kafka)</h1>

<p>https://github.com/leobip/monitoring.git</p>

<p>Welcome! 👋
This project sets up a local monitoring stack based on Prometheus, Grafana, and Kafka (with Kafka UI), using Helm charts and persistent volumes for durability.</p>

<p>Whether you’re experimenting with Kubernetes, developing custom controllers, or just want to see your cluster’s activity in real time — this guide has got you covered.
By the end, you’ll have a working environment where:</p>

<p>Prometheus collects metrics from your apps and infrastructure 🧲</p>

<p>Grafana helps you visualize those metrics with beautiful dashboards 📊</p>

<p>Kafka acts as a telemetry backbone, and Kafka-UI lets you explore the events flowing through it 🔄</p>

<p>This setup runs entirely on your local machine, making it ideal for testing and development — no cloud account or external services required!</p>

<hr />

<h2 id="-what-youll-get">🚀 What You’ll Get</h2>

<p>Once deployed, your local monitoring stack will include:</p>

<p>✅ A Prometheus instance, scraping metrics on port 30090</p>

<p>✅ A Grafana dashboard, accessible at localhost:30095</p>

<p>✅ A Kafka broker with persistent volumes</p>

<p>✅ Kafka UI at localhost:30096 to inspect topics and messages</p>

<p>✅ A health check script to ensure everything is up and running</p>

<hr />

<h2 id="-prometheus--grafana">📦 Prometheus + Grafana</h2>

<p>We’ll use the official Helm charts from Bitnami and Prometheus Community, with a few tweaks for local development and persistence. See values files for config details.</p>

<h2 id="-kafka--kafka-ui">🧱 Kafka + Kafka UI</h2>

<p>This section helps you install Kafka in plaintext mode, along with a lightweight UI to browse topics and messages.</p>

<p>Persistent volumes are enabled so your topics and messages stick around across Minikube restarts.</p>

<hr />

<h2 id="-folder-structure">🧱 Folder Structure</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>monitoring/
├── deploy-all.sh <span class="c"># Script to install all components</span>
├── pv/ <span class="c"># Persistent volume manifests</span>
│ ├── kafka-pv.yaml
│ ├── prometheus-pv.yaml
│ └── grafana-pv.yaml
└── values/ <span class="c"># Helm values for each component</span>
  ├── kafka-values.yaml
  ├── kafka-ui-values.yaml
  ├── prometheus-values.yaml
  └── grafana-values.yaml
</code></pre></div></div>

<hr />

<h2 id="️-prerequisites">🛠️ Prerequisites</h2>

<p>Make sure you have the following installed:</p>

<ul>
  <li><a href="https://minikube.sigs.k8s.io/">Minikube</a></li>
  <li><a href="https://kubernetes.io/docs/tasks/tools/">kubectl</a></li>
  <li><a href="https://helm.sh/docs/intro/install/">Helm</a></li>
</ul>

<blockquote>
  <p>This setup assumes you’re running Kubernetes locally with Minikube.</p>
</blockquote>

<hr />

<h2 id="-installation">🚀 Installation</h2>

<h3 id="1-start-minikube">1.– Start Minikube</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minikube start <span class="nt">--memory</span><span class="o">=</span>4g <span class="nt">--cpus</span><span class="o">=</span>2
</code></pre></div></div>

<h3 id="2--add-helm-repositories">2.- Add Helm repositories</h3>

<ul>
  <li>This step is added in the script: Just uncomment de section</li>
</ul>

<h3 id="3--run-the-install-script">3.- Run the install script</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>monitoring
<span class="nb">chmod</span> +x deploy-all.sh
./deploy-all.sh
</code></pre></div></div>

<ul>
  <li>This script will:
    <ul>
      <li>Create a monitoring namespace.</li>
      <li>Apply persistent volumes from pv/.</li>
    </ul>
  </li>
</ul>

<h2 id="-access-to-monitoring-tools">📋 Access to Monitoring Tools</h2>

<table>
  <thead>
    <tr>
      <th>Tool</th>
      <th>External Access (NodePort)</th>
      <th>Internal Access (Cluster DNS)</th>
      <th>Important Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Grafana</strong></td>
      <td><a href="http://192.168.49.2:30095">http://192.168.49.2:30095</a></td>
      <td><code class="language-plaintext highlighter-rouge">grafana.monitoring.svc.cluster.local</code></td>
      <td>- User: <code class="language-plaintext highlighter-rouge">admin</code> <br /> - Get password:<br /> <code class="language-plaintext highlighter-rouge">kubectl get secret -n monitoring grafana -o jsonpath="{.data.admin-password}" \| base64 --decode</code></td>
    </tr>
    <tr>
      <td><strong>Kafka</strong></td>
      <td>See ports with:<br /><code class="language-plaintext highlighter-rouge">kubectl get svc -n monitoring -l "app.kubernetes.io/instance=kafka,app.kubernetes.io/component=kafka,pod" -o jsonpath='{.items[*].spec.ports[0].nodePort}'</code></td>
      <td>- Client: <code class="language-plaintext highlighter-rouge">kafka.monitoring.svc.cluster.local:9092</code><br />- Brokers: <code class="language-plaintext highlighter-rouge">kafka-controller-0/1/2.kafka-controller-headless.monitoring.svc.cluster.local:9092</code></td>
      <td>- KRaft enabled<br />- EXTERNAL listener enabled<br />- Run a client with:<br /><code class="language-plaintext highlighter-rouge">kubectl run kafka-client --rm -it --image docker.io/bitnami/kafka:4.0.0-debian-12-r8 -n monitoring -- bash</code></td>
    </tr>
    <tr>
      <td><strong>Prometheus</strong></td>
      <td>Run:<br /><code class="language-plaintext highlighter-rouge">export NODE_PORT=$(kubectl get svc -n monitoring prometheus-server -o jsonpath="{.spec.ports[0].nodePort}")</code><br /><code class="language-plaintext highlighter-rouge">export NODE_IP=$(kubectl get nodes -o jsonpath="{.items[0].status.addresses[0].address}")</code><br /><code class="language-plaintext highlighter-rouge">echo http://$NODE_IP:$NODE_PORT</code></td>
      <td><code class="language-plaintext highlighter-rouge">prometheus-server.monitoring.svc.cluster.local</code></td>
      <td>- Server and AlertManager available<br />- AlertManager: port-forward:<br /><code class="language-plaintext highlighter-rouge">kubectl port-forward -n monitoring svc/prometheus-alertmanager 9093</code><br />- PushGateway: port-forward:<br /><code class="language-plaintext highlighter-rouge">kubectl port-forward -n monitoring svc/prometheus-prometheus-pushgateway 9091</code></td>
    </tr>
  </tbody>
</table>

<p>✅ Additional Notes</p>

<ul>
  <li>Minikube IP: 192.168.49.2 (verify with minikube ip if needed)</li>
  <li>Namespace: monitoring</li>
  <li>PVCs applied: grafana-pvc, kafka-pv, prometheus-pvc</li>
</ul>

<hr />

<h2 id="-verify-your-setup">🎯 Verify Your Setup</h2>

<p>Let’s make sure everything is working! You’ll check that Prometheus, Grafana, Kafka, and Kafka UI are all running and accessible via NodePorts.</p>

<h2 id="-accessing-tools-from-host-minikube--docker-on-macos">🔍 Accessing Tools from Host (Minikube + Docker on macOS)</h2>

<ul>
  <li>By default, services exposed via NodePort in Minikube may not be directly accessible from your host when using the Docker driver on macOS. This is due to networking limitations: the NodePort is exposed inside the Minikube VM/container, not on your host machine’s network.</li>
</ul>

<h3 id="get-the-name-of-the-tools-pods">Get the name of the tools pods</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>❯ kubectl get svc <span class="nt">-n</span> monitoring
NAME                                  TYPE        CLUSTER-IP       EXTERNAL-IP    PORT<span class="o">(</span>S<span class="o">)</span>                      AGE
grafana                               NodePort    10.102.51.68     &lt;none&gt;         80:30095/TCP                 29m
kafka                                 ClusterIP   10.100.118.216   &lt;none&gt;         9092/TCP,9095/TCP            46m
kafka-controller-0-external           NodePort    10.109.227.109   192.168.49.2   9094:30092/TCP               46m
kafka-controller-1-external           NodePort    10.97.149.130    192.168.49.2   9094:30093/TCP               46m
kafka-controller-2-external           NodePort    10.99.194.34     192.168.49.2   9094:30094/TCP               46m
kafka-controller-headless             ClusterIP   None             &lt;none&gt;         9094/TCP,9092/TCP,9093/TCP   46m
kafka-jmx-metrics                     ClusterIP   10.99.29.148     &lt;none&gt;         5556/TCP                     46m
prometheus-alertmanager               ClusterIP   10.103.180.130   &lt;none&gt;         9093/TCP                     46m
prometheus-alertmanager-headless      ClusterIP   None             &lt;none&gt;         9093/TCP                     46m
prometheus-kube-state-metrics         ClusterIP   10.102.171.116   &lt;none&gt;         8080/TCP                     46m
prometheus-prometheus-node-exporter   ClusterIP   10.97.14.115     &lt;none&gt;         9100/TCP                     46m
prometheus-prometheus-pushgateway     ClusterIP   10.101.189.12    &lt;none&gt;         9091/TCP                     46m
prometheus-server                     NodePort    10.104.67.195    &lt;none&gt;         80:30090/TCP                 46m
</code></pre></div></div>

<h3 id="example">Example</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get svc <span class="nt">-n</span> monitoring grafana

NAME      TYPE       CLUSTER-IP     EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>        AGE
grafana   NodePort   10.102.51.68   &lt;none&gt;        80:30095/TCP   34m


kubectl get svc <span class="nt">-n</span> monitoring prometheus-server

NAME         TYPE       CLUSTER-IP     EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>          AGE
prometheus   NodePort   10.98.27.101   &lt;none&gt;        9090:31090/TCP   45m


kubectl get svc <span class="nt">-n</span> monitoring kafka-ui

NAME       TYPE       CLUSTER-IP     EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>          AGE
kafka-ui   NodePort   10.96.220.89   &lt;none&gt;        8080:30096/TCP   19m

</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ⚠️ IP may change on restart (check again)</span>
minikube ip
192.168.49.2
</code></pre></div></div>

<ul>
  <li><strong><em>You might expect <code class="language-plaintext highlighter-rouge">curl &lt;http://192.168.49.2:30095&gt;</code> to work, but it doesn’t respond.</em></strong></li>
</ul>

<h3 id="-option-1-minikube-service-temporary">🧪 Option 1: minikube service (Temporary)</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Grafana</span>
minikube service grafana <span class="nt">-n</span> monitoring

<span class="c"># Prometheus</span>
minikube service prometheus-server <span class="nt">-n</span> monitoring

<span class="c"># Kafka-ui</span>
minikube service kafka-ui <span class="nt">-n</span> monitoring

</code></pre></div></div>

<ul>
  <li>This opens a temporary proxy and shows a localhost URL like:</li>
</ul>

<pre><code class="language-psql"># Grafana
|------------|---------|-------------|---------------------------|
| NAMESPACE  |  NAME   | TARGET PORT |            URL            |
|------------|---------|-------------|---------------------------|
| monitoring | grafana | service/80  | http://192.168.49.2:30095 |
|------------|---------|-------------|---------------------------|
🏃  Starting tunnel for service grafana.
|------------|---------|-------------|------------------------|
| NAMESPACE  |  NAME   | TARGET PORT |          URL           |
|------------|---------|-------------|------------------------|
| monitoring | grafana |             | http://127.0.0.1:56851 |
|------------|---------|-------------|------------------------|
🎉  Opening service monitoring/grafana in default browser...
❗  Because you are using a Docker driver on darwin, the terminal needs to be open to run it.


# Prometheus
|------------|-------------------|-------------|---------------------------|
| NAMESPACE  |       NAME        | TARGET PORT |            URL            |
|------------|-------------------|-------------|---------------------------|
| monitoring | prometheus-server | http/80     | http://192.168.49.2:30090 |
|------------|-------------------|-------------|---------------------------|
🏃  Starting tunnel for service prometheus-server.
|------------|-------------------|-------------|------------------------|
| NAMESPACE  |       NAME        | TARGET PORT |          URL           |
|------------|-------------------|-------------|------------------------|
| monitoring | prometheus-server |             | http://127.0.0.1:56409 |
|------------|-------------------|-------------|------------------------|
🎉  Opening service monitoring/prometheus-server in default browser...
❗  Because you are using a Docker driver on darwin, the terminal needs to be open to run it.


# kafka
|------------|----------|-------------|---------------------------|
| NAMESPACE  |   NAME   | TARGET PORT |            URL            |
|------------|----------|-------------|---------------------------|
| monitoring | kafka-ui | http/8080   | http://192.168.49.2:30096 |
|------------|----------|-------------|---------------------------|
🏃  Starting tunnel for service kafka-ui.
|------------|----------|-------------|------------------------|
| NAMESPACE  |   NAME   | TARGET PORT |          URL           |
|------------|----------|-------------|------------------------|
| monitoring | kafka-ui |             | http://127.0.0.1:64903 |
|------------|----------|-------------|------------------------|

</code></pre>

<ul>
  <li>✅ Works immediately, opens browser
    <ul>
      <li>❗ Needs terminal to stay open (as it runs a local tunnel)</li>
      <li>❗ Not script-friendly or persistent</li>
    </ul>
  </li>
</ul>

<h3 id="persistent">persistent</h3>

<p>🛠 Option 2: kubectl port-forward (Persistent while running)</p>

<ul>
  <li>You can forward the Grafana service to a local port
    <ul>
      <li>With Lens, Openlens, K9s, etc</li>
      <li>Or via kubectl cmd in terminal</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl port-forward <span class="nt">-n</span> monitoring svc/grafana 30095:80

kubectl port-forward <span class="nt">-n</span> monitoring svc/prometheus 9090:9090

kubectl port-forward svc/kafka-ui 8080:8080 <span class="nt">-n</span> monitoring

</code></pre></div></div>

<ul>
  <li>
    <p><strong><em>NOTE: Yopu have to stop the temporary proxy with ctrl-c before stop minikube, and execute again on restart</em></strong></p>
  </li>
  <li>
    <p>Then visit (In this example):</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># grafana</span>
http://localhost:30095

<span class="c"># prometheus</span>
http://localhost:9090

<span class="c"># kafka</span>
http://localhost:9093

</code></pre></div></div>

<ul>
  <li><strong>Login</strong>
    <ul>
      <li><em>Grafana:</em>
        <ul>
          <li>user: admin</li>
          <li>password: admin***</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>✅ Works reliably
    <ul>
      <li>❗ Still requires the terminal to stay open</li>
      <li>❗ Better suited for dev workflows, or when using tools like Lens/K9s which manage this automatically</li>
    </ul>
  </li>
</ul>

<h3 id="-option-3-minikube-tunnel-recommended-for-real-external-access">🛡 Option 3: minikube tunnel (Recommended for real external access)</h3>

<ul>
  <li>Only if you define type: as LoadBalancer instead of NodePort</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minikube tunnel
</code></pre></div></div>

<ul>
  <li>Exposes NodePort and LoadBalancer services to your macOS host.</li>
  <li>Runs in background (but requires admin privileges).</li>
  <li>Makes the minikube ip + NodePort combination work:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://192.168.49.2:30095
...
</code></pre></div></div>

<ul>
  <li><strong>✅ Best if you want persistent access via actual cluster IP</strong></li>
  <li><strong>⚠️ You’ll need to keep the tunnel running in a terminal</strong></li>
</ul>

<h3 id="summary">Summary</h3>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Persistent</th>
      <th>Scriptable</th>
      <th>Requires open terminal</th>
      <th>Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">minikube service</code></td>
      <td>❌</td>
      <td>❌</td>
      <td>✅</td>
      <td>Great for quick UI testing</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">kubectl port-forward</code></td>
      <td>❌</td>
      <td>✅</td>
      <td>✅</td>
      <td>Ideal during dev/debug</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">minikube tunnel</code></td>
      <td>✅</td>
      <td>✅</td>
      <td>✅ (background)</td>
      <td>Best for stable external access</td>
    </tr>
  </tbody>
</table>

<h3 id="tools-summary">Tools Summary</h3>

<table>
  <thead>
    <tr>
      <th>Service</th>
      <th>Method</th>
      <th>Persistent</th>
      <th>Host Access</th>
      <th>Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Grafana</strong></td>
      <td><code class="language-plaintext highlighter-rouge">minikube service</code></td>
      <td>❌</td>
      <td>✅</td>
      <td>UI test only</td>
    </tr>
    <tr>
      <td> </td>
      <td><code class="language-plaintext highlighter-rouge">kubectl port-fwd</code></td>
      <td>❌</td>
      <td>✅</td>
      <td>Dev access</td>
    </tr>
    <tr>
      <td> </td>
      <td><code class="language-plaintext highlighter-rouge">minikube tunnel</code></td>
      <td>✅</td>
      <td>✅</td>
      <td>Needed for NodePort from host</td>
    </tr>
    <tr>
      <td><strong>Prometheus</strong></td>
      <td>Same as above</td>
      <td>Same</td>
      <td>Same</td>
      <td>Accessible at port 9090</td>
    </tr>
    <tr>
      <td><strong>Kafka</strong></td>
      <td><code class="language-plaintext highlighter-rouge">port-fwd 9093</code></td>
      <td>❌</td>
      <td>✅ (TLS)</td>
      <td>For testing with TLS listener</td>
    </tr>
    <tr>
      <td> </td>
      <td><code class="language-plaintext highlighter-rouge">minikube tunnel</code></td>
      <td>✅</td>
      <td>✅</td>
      <td>Needed for TLS access from host tools</td>
    </tr>
  </tbody>
</table>

<h2 id="-stopping-and-restarting-minikube-safely">🔄 Stopping and Restarting Minikube Safely</h2>

<p><strong><em>♻️ Minikube Lifecycle (Shutdown / Restart)</em></strong></p>

<p>To safely shut down and restart your monitoring stack without losing data or encountering errors:</p>

<h3 id="-stop-minikube">✅ Stop Minikube</h3>

<ul>
  <li>Use minikube stop instead of deleting the cluster:
    <ul>
      <li>This safely shuts down the VM/container.</li>
      <li>PVCs and all service configurations remain intact.</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minikube stop
</code></pre></div></div>

<h3 id="-start-again-later">✅ Start Again Later</h3>

<ul>
  <li>This restores the full state, including your deployed services, PVCs, and Helm releases.
    <ul>
      <li>All NodePorts and persistent data remain available.</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minikube start
</code></pre></div></div>

<p><strong><em>⚠️ Do Not Use</em></strong></p>

<ul>
  <li>❌ This deletes all volumes, pods, secrets, configs — use only if you want a clean reset.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minikube delete
</code></pre></div></div>

<h3 id="-check-status">🧪 Check Status</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pods <span class="nt">-n</span> monitoring
</code></pre></div></div>

<ul>
  <li>If pods don’t come up correctly (e.g., CrashLoopBackOff), you may need to:
    <ul>
      <li>Reapply deploy-all.sh</li>
      <li>
        <p>Re-check Minikube disk availability with:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minikube ssh
<span class="nb">df</span> <span class="nt">-h</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="-persistent-volumes--restarting-notes">🔒 Persistent Volumes &amp; Restarting Notes</h3>

<table>
  <thead>
    <tr>
      <th>Component</th>
      <th>Persistent?</th>
      <th>How It’s Stored</th>
      <th>Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Prometheus</td>
      <td>✅</td>
      <td>PVC → HostPath on VM</td>
      <td>Config &amp; scraped metrics preserved across reboots</td>
    </tr>
    <tr>
      <td>Grafana</td>
      <td>✅</td>
      <td>PVC (grafana-pvc)</td>
      <td>Dashboards, settings are saved</td>
    </tr>
    <tr>
      <td>Kafka</td>
      <td>✅</td>
      <td>PVC per broker/controller</td>
      <td>Topic data survives restart. Must wait for all brokers to rejoin.</td>
    </tr>
    <tr>
      <td>Kafka-UI</td>
      <td>❌</td>
      <td>Ephemeral</td>
      <td>Will restart fresh; doesn’t affect Kafka state</td>
    </tr>
  </tbody>
</table>

<h3 id="-optional-restart-deploy-allsh-if-needed">🔁 Optional: Restart deploy-all.sh (if needed)</h3>

<ul>
  <li>You can safely re-run the script to reapply Helm charts and PVCs:
    <ul>
      <li>💡 Helm is idempotent — it will upgrade existing releases without data loss if PVCs exist.</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./deploy-all.sh
</code></pre></div></div>

<h3 id="-tip-back-up-persistent-data-optional">📁 Tip: Back Up Persistent Data (Optional)</h3>

<ul>
  <li>To snapshot your PVCs before restarting or for backup purposes:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pvc <span class="nt">-n</span> monitoring
</code></pre></div></div>

<ul>
  <li>For example:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl <span class="nb">cp </span>monitoring/prometheus-server-0:/opt/bitnami/prometheus/data ./backup-prometheus-data
</code></pre></div></div>

<h2 id="-final-tip-automate-health-checks-optional">🧠 Final Tip: Automate Health Checks (Optional)</h2>

<p>To quickly check if your monitoring stack is up and running, you can either:</p>

<h3 id="-option-a-use-the-health-check-script-recommended"><strong><em>✅ Option A: Use the health check script (recommended)</em></strong></h3>

<ul>
  <li>Run the provided script to verify key components like Prometheus, Grafana, Kafka and Kafka-UI:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./check-health.sh
</code></pre></div></div>

<ul>
  <li>Response</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>❯ ./check-health.sh

⏳ Checking health of monitoring components <span class="k">in </span>namespace: monitoring
🔍 prometheus-server...
deployment <span class="s2">"prometheus-server"</span> successfully rolled out
✅ prometheus-server is healthy
🔍 grafana...
deployment <span class="s2">"grafana"</span> successfully rolled out
✅ grafana is healthy
🔍 kafka-ui...
deployment <span class="s2">"kafka-ui"</span> successfully rolled out
✅ kafka-ui is healthy
🔍 kafka-controller...
statefulset rolling update <span class="nb">complete </span>3 pods at revision kafka-controller-98bc6557b...
✅ kafka-controller is healthy
✅ Health check completed.
</code></pre></div></div>

<ul>
  <li>If components are not found or in a bad state, the script will print warnings accordingly.</li>
  <li>You can edit the script to match the names of your deployments or statefulsets, depending on your YAMLs.</li>
</ul>

<h3 id="-option-b-check-manually-with-kubectl"><strong><em>🔍 Option B: Check manually with kubectl</em></strong></h3>

<p>If you prefer manual inspection or want to verify specific resources:</p>

<ul>
  <li>List all pods in the monitoring namespace:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pods <span class="nt">-n</span> monitoring
</code></pre></div></div>

<ul>
  <li>You should see something like:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NAME                                                READY   STATUS    RESTARTS        AGE
grafana-57554dd88-rc8z4                             1/1     Running   0               3h11m
kafka-controller-0                                  1/1     Running   0               175m
kafka-controller-1                                  1/1     Running   0               175m
kafka-controller-2                                  1/1     Running   0               175m
kafka-ui-5448964747-ds2bd                           1/1     Running   0               171m
prometheus-alertmanager-0                           1/1     Running   1 <span class="o">(</span>4h59m ago<span class="o">)</span>   24h
prometheus-kube-state-metrics-7f796b7d44-89mjd      1/1     Running   1 <span class="o">(</span>4h59m ago<span class="o">)</span>   24h
prometheus-prometheus-node-exporter-cltc4           1/1     Running   1 <span class="o">(</span>4h59m ago<span class="o">)</span>   24h
prometheus-prometheus-pushgateway-d4f8cb767-nwtn9   1/1     Running   1 <span class="o">(</span>4h59m ago<span class="o">)</span>   24h
prometheus-server-79798b4ff6-7g55g                  2/2     Running   2 <span class="o">(</span>4h59m ago<span class="o">)</span>   24h
...
</code></pre></div></div>

<ul>
  <li>Check services and their ports:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get svc <span class="nt">-n</span> monitoring
</code></pre></div></div>

<ul>
  <li>Look for NodePort services exposing the UIs:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NAME                                  TYPE        CLUSTER-IP       EXTERNAL-IP    PORT<span class="o">(</span>S<span class="o">)</span>                      AGE
grafana                               NodePort    10.104.174.27    &lt;none&gt;         80:30095/TCP                 3h11m
kafka                                 ClusterIP   10.106.201.77    &lt;none&gt;         9092/TCP,9095/TCP            175m
kafka-controller-0-external           NodePort    10.105.143.201   192.168.49.2   9094:30092/TCP               175m
kafka-controller-1-external           NodePort    10.101.82.105    192.168.49.2   9094:30093/TCP               175m
kafka-controller-2-external           NodePort    10.97.107.152    192.168.49.2   9094:30094/TCP               175m
kafka-controller-headless             ClusterIP   None             &lt;none&gt;         9094/TCP,9092/TCP,9093/TCP   175m
kafka-ui                              NodePort    10.100.56.227    &lt;none&gt;         8080:30096/TCP               171m
prometheus-alertmanager               ClusterIP   10.103.180.130   &lt;none&gt;         9093/TCP                     24h
prometheus-alertmanager-headless      ClusterIP   None             &lt;none&gt;         9093/TCP                     24h
prometheus-kube-state-metrics         ClusterIP   10.102.171.116   &lt;none&gt;         8080/TCP                     24h
prometheus-prometheus-node-exporter   ClusterIP   10.97.14.115     &lt;none&gt;         9100/TCP                     24h
prometheus-prometheus-pushgateway     ClusterIP   10.101.189.12    &lt;none&gt;         9091/TCP                     24h
prometheus-server                     NodePort    10.104.67.195    &lt;none&gt;         80:30090/TCP                 24h
</code></pre></div></div>

<ul>
  <li>Then, access the dashboards using <code class="language-plaintext highlighter-rouge">http://&lt;minikube-ip&gt;:&lt;nodeport&gt;</code>. For example:
    <ul>
      <li>Grafana: <a href="http://localhost:30095">http://localhost:30095</a></li>
      <li>Prometheus: <a href="http://localhost:30090">http://localhost:30090</a></li>
      <li>Kafka UI: <a href="http://localhost:30096">http://localhost:30096</a></li>
    </ul>
  </li>
  <li><strong>Use minikube ip to get your cluster IP if needed.</strong></li>
</ul>]]></content><author><name>Leoncio López</name><email>leobip27@gmail.com</email></author><summary type="html"><![CDATA[📡 Local Monitoring Stack for Kubernetes (Prometheus + Grafana + Kafka)]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/projects/2025-07-26-monitoring.png" /><media:content medium="image" url="http://localhost:4000/images/projects/2025-07-26-monitoring.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SonarQube &amp;amp; SonarLint for Code Analysis</title><link href="http://localhost:4000/local-env-sonarqube/" rel="alternate" type="text/html" title="SonarQube &amp;amp; SonarLint for Code Analysis" /><published>2025-03-20T21:55:15+01:00</published><updated>2025-03-20T21:55:15+01:00</updated><id>http://localhost:4000/local-env-sonarqube</id><content type="html" xml:base="http://localhost:4000/local-env-sonarqube/"><![CDATA[<h1 id="sonarqube--sonarlint">SonarQube &amp; SonarLint</h1>

<h2 id="introduction">Introduction</h2>
<p>In this article, we will explore SonarQube and SonarLint, key tools for improving code quality. SonarQube acts as a central server for static code analysis, while SonarLint provides real-time feedback in the development environment. Additionally, we will see how to integrate them to maximize their effectiveness.</p>
<h3 id="what-is-sonarqube">What is SonarQube?</h3>

<p><a href="https://www.sonarqube.org/">SonarQube</a> is a powerful static code analysis tool that helps developers identify bugs, security vulnerabilities, and code smells in their projects. It provides detailed insights to improve code quality and maintainability.</p>

<p>SonarQube is available in different editions:</p>

<ul>
  <li><strong>Community Edition</strong> (Free) – Open-source version with essential static analysis features.</li>
  <li><strong>Developer Edition</strong> – Adds advanced language support and branch analysis.</li>
  <li><strong>Enterprise Edition</strong> – Includes portfolio management and governance features.</li>
  <li><strong>Data Center Edition</strong> – High availability and scalability for large teams.</li>
</ul>

<p>For this guide, we will use the <strong>Community Edition</strong>.</p>

<h3 id="what-is-sonarlint">What is SonarLint?</h3>

<p><a href="https://www.sonarlint.org/">SonarLint</a> is an IDE plugin that provides real-time linting and code analysis. It helps developers catch issues early in the development process, ensuring consistent and high-quality code. It can be confiugured to work alone or with connection to SonarQube profiles, It functions as an extension of SonarQube when connected to the server.</p>

<h4 id="connection-between-sonarlint-and-sonarqube">Connection between SonarLint and SonarQube</h4>

<ul>
  <li>
    <p>SonarLint can operate in two modes:</p>

    <ul>
      <li>Standalone mode: Works independently in the IDE.</li>
      <li>Connected mode: Synchronizes with a SonarQube server to share rules and configurations.</li>
    </ul>
  </li>
  <li>
    <p>To connect SonarLint with SonarQube:</p>

    <ul>
      <li>Ensure that SonarQube is running.</li>
      <li>Install the SonarLint plugin in your IDE.</li>
      <li>Add the SonarQube URL in the SonarLint configuration.</li>
      <li>Authenticate with a SonarQube token.</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="database-support-in-sonarqube">Database Support in SonarQube</h3>
<h3 id="embedded-database-h2">Embedded Database (H2)</h3>
<p>By default, SonarQube <strong>Community Edition</strong> comes with an embedded <strong>H2 database</strong>. However, this database is only intended for <strong>evaluation and personal/local usage</strong>, as it is <strong>not recommended for production</strong> due to size &amp; data scalability limitations.</p>
<h3 id="supported-external-databases">Supported External Databases</h3>
<p>For a <strong>stable and production-ready</strong> deployment, SonarQube supports the following databases:</p>

<ul>
  <li><strong>PostgreSQL</strong> (Recommended)</li>
  <li><strong>Microsoft SQL Server</strong></li>
  <li><strong>Oracle Database</strong></li>
</ul>

<h4 id="sonarqube-database-configuration-guides">SonarQube Database Configuration Guides:</h4>
<ul>
  <li>https://docs.sonarsource.com/sonarqube-server/latest/setup-and-upgrade/install-the-server/installing-the-database/
    <h2 id="installing-sonarqube-locally">Installing SonarQube Locally</h2>
  </li>
  <li>
    <p>Prerequisite:
Before setting up SonarQube, ensure that Docker &amp; docker-compose is installed on your machine. You can find the complete installation guide on the official Docker website, Docker Installation Guide:  https://docs.docker.com/engine/install/</p>
  </li>
  <li>SonarQube Installation</li>
</ul>

<p>To deploy SonarQube locally, we will use Docker Compose. This approach allows for future integration of additional tools and services within the local development environment. Using Docker Compose simplifies service configuration and management through a docker-compose.yaml file located in the project’s root directory.</p>

<p>Docker significantly simplifies the process of running SonarQube without requiring complex manual configurations.
For reference, the SonarQube page on Docker Hub (https://hub.docker.com/_/sonarqube)  provides links to repositories with example Dockerfile and docker-compose.yaml configurations, and instructions to install and run SonarQube with simplest command like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run --name sonarqube-custom -p 9000:9000 sonarqube:community
</code></pre></div></div>
<p>You can then browse to http://localhost:9000 or http://host-ip:9000 in your web browser to access the web interface.</p>

<h3 id="bonus-helm---installation-with-postgresql-included">Bonus: <strong>HELM</strong> - Installation with PostgreSQL Included</h3>
<p>For Kubernetes users, SonarQube can be installed using Helm with a <strong>PostgreSQL database included</strong>. Check out the official Helm package:  (here you can find different versions at Artifact Hub)
🔗 <a href="https://artifacthub.io/packages/helm/sonarqube/sonarqube">SonarQube Helm Chart</a></p>

<h3 id="folder-structure">Folder Structure:</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>local-dev-environment/
│
├── sonarqube/                  <span class="c"># SonarQube setup</span>
│   ├── conf/                   <span class="c"># Configuration files</span>
│   ├── data/                   <span class="c"># Data storage</span>
│   ├── logs/                   <span class="c"># Log files</span>
│   ├── extensions/             <span class="c"># Plugins and extensions</span>
│
├── docker-compose.yaml         <span class="c"># Docker Compose for multiple services</span>
...
</code></pre></div></div>

<ul>
  <li>docker-compose.yaml (at project root)</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>services:
  sonarqube:
    image: sonarqube:community # We are using the latest community version, it could also be the lts-community -(Long Term Support)
    restart: unless-stopped  # 🔄 Automatically restarts after a system reboot
    depends_on:
      - sonar_db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar_db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    ports:
      - "9001:9000"
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp

  sonar_db:
    image: postgres:13
    restart: unless-stopped  # 🔄 Automatically restarts after a system reboot
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - sonar_db:/var/lib/postgresql
      - sonar_db_data:/var/lib/postgresql/data

volumes:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  sonar_db:
  sonar_db_data:

</code></pre></div></div>

<h3 id="automatic-backup-of-the-sonarqube-database-optional">Automatic Backup of the SonarQube Database (Optional)</h3>
<p>Even though we configured restart: unless-stopped, ensuring that data persists after a reboot, in our local environment, it’s good practice to have a backup strategy. Below is a solution using a backup service.</p>

<h4 id="manual-db-backup">Manual DB Backup</h4>
<ul>
  <li>To back up the PostgreSQL database:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker exec -t postgres pg_dumpall -c -U sonar &gt; backup.sql
</code></pre></div>    </div>
  </li>
  <li>To restore:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker exec -i postgres psql -U sonar -d sonarqube &lt; backup.sql
</code></pre></div>    </div>
    <h4 id="adding-a-backup-service">Adding a Backup Service</h4>
  </li>
  <li>Add this code to the docker-compose.yaml</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  sonar_backup:
    image: postgres:13
    depends_on:
      - sonar_db
    volumes:
      - sonarqube_data:/opt/sonarqube/data
    entrypoint: ["/bin/sh", "-c", "while true; do /opt/sonarqube/data/backup_db.sh; sleep 86400; done"]
</code></pre></div></div>

<ul>
  <li>
    <p>Backup Script</p>

    <p>Create the following script inside sonarqube/data/backup_db.sh:</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash

# Configuration
BACKUP_DIR="/opt/sonarqube/data/backups"
TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
BACKUP_FILE="$BACKUP_DIR/sonarqube_db_$TIMESTAMP.sql"

# Create backup directory if it does not exist
mkdir -p $BACKUP_DIR

# Perform PostgreSQL backup
PGPASSWORD="sonar" pg_dump -h sonar_db -U sonar -d sonar &gt; $BACKUP_FILE

# Clean up old backups (optional, keep only the last 5 backups)
ls -tp $BACKUP_DIR | grep -v '/$' | tail -n +6 | xargs -I {} rm -- "$BACKUP_DIR/{}"

echo "Backup completed: $BACKUP_FILE"
</code></pre></div></div>

<ul>
  <li>
    <p>Grant Execution Permission</p>

    <p>Run the following command to make the script executable:</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod +x sonarqube/data/backup_db.sh
</code></pre></div></div>

<h3 id="conclusion">Conclusion</h3>

<ul>
  <li>
    <p>SonarQube and PostgreSQL are configured with persistent storage.</p>
  </li>
  <li>
    <p>Containers automatically restart unless manually stopped.</p>
  </li>
  <li>
    <p>A backup service is set up to create database backups automatically.</p>
  </li>
</ul>

<p>This setup ensures a robust SonarQube environment for local development. 🚀</p>

<h3 id="running-sonarqube">Running SonarQube</h3>
<p>Once the files are in place, follow these steps to start SonarQube:</p>

<ul>
  <li>Build the SonarQube image</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose build

</code></pre></div></div>

<ul>
  <li>Start the SonarQube container</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up -d

</code></pre></div></div>
<p><img src="/images/projects/2025-03-20-docker-compose-creation.jpg" alt="compose-creation" /></p>

<ul>
  <li>
    <p>Access SonarQube UI</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Open http://localhost:9001 in your browser.
</code></pre></div>    </div>
  </li>
</ul>

<p><img src="/images/projects/2025-03-20-sonar-login.jpg" alt="sonar-login" /></p>

<ul>
  <li>
    <p>Login Credentials</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Username: admin
  Password: admin
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="installing-and-configuring-sonarqube-for-ide-fromerly-sonarlint">Installing and Configuring SonarQube for IDE (fromerly SonarLint)</h2>

<h3 id="installation">Installation</h3>

<h5 id="to-install-sonarlint-in-your-ide">To install SonarLint in your IDE:</h5>

<ul>
  <li>
    <p>VS Code: Install the “SonarLint” extension from the Extensions Marketplace.</p>
  </li>
  <li>
    <p>IntelliJ IDEA: Install the “SonarLint” plugin from the Plugins Marketplace.</p>
  </li>
  <li>
    <p>Eclipse: Install the “SonarLint” plugin from the Eclipse Marketplace.</p>
  </li>
</ul>

<p>Vs-Code Example:</p>

<p><img src="/images/projects/2025-03-20-sonarlint-install1.jpg" alt="sonar-lint-vscode" /></p>

<h5 id="using-sonarlint-in-standalone-mode">Using SonarLint in Standalone Mode</h5>
<p>SonarLint can work independently without connecting to a SonarQube server. In this mode, it provides static analysis using its built-in rule set.</p>

<p>For example, after installing SonarLint in VS Code:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Open a project.

	SonarLint will automatically scan the files for issues.

	Hover over a warning to view explanations and possible fixes.
</code></pre></div></div>

<p>This is useful when you want quick feedback without setting up a full SonarQube instance.</p>

<p><img src="/images/projects/2025-03-20-sonarlint-find.png" alt="sonar-lint-find" /></p>

<h5 id="configuration-in-connected-mode">Configuration in Connected Mode</h5>

<p>To connect SonarLint to SonarQube:</p>

<p>Open the SonarLint settings in your IDE.</p>

<p>Select “Connect to SonarQube or SonarCloud.”</p>

<p><img src="/images/projects/2025-03-20-sonarqube-ide-config1.jpg" alt="sonarqube-config-1" /></p>

<p>Enter the SonarQube server URL (e.g., http://localhost:9000).</p>

<p><img src="/images/projects/2025-03-20-sonarqube-ide-config2.jpg" alt="sonarqube-config2" /></p>

<p>Authenticate using a SonarQube token. (Or allow access from your Sonarqube instance)</p>

<p><img src="/images/projects/2025-03-20-sonarqube-ide-config3.jpg" alt="sonarqube-config3" />
<strong>__</strong><strong>__</strong><strong>__</strong>_____</p>

<p><img src="/images/projects/2025-03-20-sonarqube-ide-config4.jpg" alt="sonarqube-config4" /></p>

<p>Select the project to synchronize the analysis rules.</p>

<p>Example of SonarLint in Action</p>

<p>Open a code file in your IDE.</p>

<p>If there are issues, SonarLint will highlight them with warnings and suggestions.</p>

<p>Hover over an issue to see details and possible fixes.</p>

<p>If connected to SonarQube, the rules from the server will be applied in real-time.</p>

<h4 id="conclusion-1">Conclusion</h4>

<p>With this setup, you have a functional SonarQube environment with persistence and an external database. Additionally, SonarLint enhances your development experience by providing real-time feedback. Now it’s time to analyze your code!</p>]]></content><author><name>Leoncio López</name><email>leobip27@gmail.com</email></author><summary type="html"><![CDATA[SonarQube &amp; SonarLint]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/projects/2025-03-20-sonarqube.png" /><media:content medium="image" url="http://localhost:4000/images/projects/2025-03-20-sonarqube.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Building a Local Development, Testing, and Deployment Environment</title><link href="http://localhost:4000/local-dev-env/" rel="alternate" type="text/html" title="Building a Local Development, Testing, and Deployment Environment" /><published>2025-03-20T21:43:44+01:00</published><updated>2025-03-20T21:43:44+01:00</updated><id>http://localhost:4000/local-dev-env</id><content type="html" xml:base="http://localhost:4000/local-dev-env/"><![CDATA[<h2 id="local-development-environment-setup-guide">Local Development Environment Setup Guide</h2>

<h3 id="introduction">Introduction</h3>

<p>Setting up a well-structured local development environment is crucial for improving code quality, automating testing, and streamlining deployment. In this guide, we will progressively build a local development ecosystem, adding essential tools step by step. Our goal is to create an environment that helps in writing, analyzing, testing, and deploying code efficiently.</p>

<h3 id="planned-sections-for-start">Planned Sections (For Start):</h3>

<ul>
  <li><strong>Code Analysis (SonarQube)</strong> – Static code analysis to ensure quality.</li>
  <li><strong>Version Control (GitHub)</strong> – Managing and tracking code changes.</li>
  <li><strong>Linting (SonarLint for VS Code)</strong> – Ensuring code consistency in the IDE.</li>
</ul>

<hr />

<h2 id="creation-of-the-structure">Creation of the Structure</h2>

<p>To begin setting up the local development environment, let’s start by creating the folder structure for the project and defining where each tool and configuration will reside. Here’s a suggested structure:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>local-dev-environment/
│
├── sonarqube/                  <span class="c"># SonarQube setup and configuration</span>
│   ├── conf/                   <span class="c"># SonarQube configuration files (sonar.properties, etc.)</span>
│   └── data/                   <span class="c"># Data storage for SonarQube (database, etc.)</span>
│
├── tests/                      <span class="c"># Test files for local development</span>
│   └── test_example.py         <span class="c"># Example unit test</span>
│
├── README.md                   <span class="c"># Project documentation</span>
└── requirements.txt            <span class="c"># Dependencies for environment (if needed)</span>
...
... <span class="o">(</span><span class="k">in </span>development<span class="o">)</span>

</code></pre></div></div>

<h4 id="steps">Steps:</h4>

<ul>
  <li>Create the folders and initialize the repository</li>
  <li>You can initialize the repository by running git init in the root folder of local-dev-environment.</li>
  <li>Push the code to your GitHub repository and link it here: <a href="https://github.com/your-repository-link">Project GitHub Repository</a></li>
</ul>

<p>This guide will start with SonarQube, a powerful tool for static code analysis, and expand as we integrate more tools.</p>

<h4 id="links-to-tools">Links to Tools:</h4>
<p>SonarQube - https://www.sonarsource.com/</p>

<p>GitHub - https://github.com/</p>

<p>SonarLint - https://www.sonarsource.com/es/products/sonarlint/</p>

<p>Stay tuned as we continue adding more components to our development environment! 🚀</p>]]></content><author><name>Leoncio López</name><email>leobip27@gmail.com</email></author><summary type="html"><![CDATA[Local Development Environment Setup Guide]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/projects/2025-03-20-ideas-library.png" /><media:content medium="image" url="http://localhost:4000/images/projects/2025-03-20-ideas-library.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Python - Tools Library</title><link href="http://localhost:4000/json-fullsearch/" rel="alternate" type="text/html" title="Python - Tools Library" /><published>2024-12-10T00:00:00+01:00</published><updated>2024-12-10T00:00:00+01:00</updated><id>http://localhost:4000/json-fullsearch</id><content type="html" xml:base="http://localhost:4000/json-fullsearch/"><![CDATA[<h2 id="json-full-search">JSon Full Search</h2>
<p><img src="/images/projects/2024-12-10-python-json-small.jpg" alt="json-python" /></p>
<h3 id="descripción">Descripción:</h3>
<p>Tal como el nombre lo indica es una función para parsear un archivo json y extraer la clave suministrada, ya sea un valor o un diccionario en el caso de diccionarios anidados, aqui explicare el modo de uso y las mejoras que le vaya realizando.
Es una funcion recursiva que puede recorrer archivos json, diccionarios anidados y extraer un valor o incluso diccionario/s anidados segun una clave suministrada.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"John Doe"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w">
    </span><span class="nl">"address"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"street"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123 Main St"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"city"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Anytown"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"state"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CA"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"country"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"United States"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"code"</span><span class="p">:</span><span class="w"> </span><span class="s2">"US"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"email"</span><span class="p">:</span><span class="w"> </span><span class="s2">"john.doe@example.com"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"phone_numbers"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"home"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"number"</span><span class="p">:</span><span class="w"> </span><span class="s2">"555-555-5555"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"work"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"number"</span><span class="p">:</span><span class="w"> </span><span class="s2">"555-555-5556"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"employment"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"job_title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Software Engineer"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Engineering"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"building"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HQ"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"floor"</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>
<h3 id="uso">Uso:</h3>
<ul>
  <li>Por ejemplo en el codigo de ejemplo anterior, podemos extraer el valor de la clave: city:  “Anytown”, tambien podemos extraer el diccionario anidado address: { …</li>
  <li>Pendientes:
    <ul>
      <li>Contador en el caso de claves repetidas, ej: name</li>
      <li>Identificador de clave para el caso anterior</li>
    </ul>
  </li>
</ul>

<h3 id="características">Características</h3>

<ul>
  <li><strong>Tecnología:</strong> Python</li>
</ul>

<p>Github: https://github.com/leobip/json-full-search.git</p>]]></content><author><name>Leoncio López</name><email>leobip27@gmail.com</email></author><summary type="html"><![CDATA[Useful tools/functions I developed in Python]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/projects/2024-12-10-python-library.png" /><media:content medium="image" url="http://localhost:4000/images/projects/2024-12-10-python-library.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Layout: Header Image (Horizontal)</title><link href="http://localhost:4000/layout/uncategorized/layout-header-image-horizontal/" rel="alternate" type="text/html" title="Layout: Header Image (Horizontal)" /><published>2012-03-15T00:00:00+01:00</published><updated>2012-03-15T00:00:00+01:00</updated><id>http://localhost:4000/layout/uncategorized/layout-header-image-horizontal</id><content type="html" xml:base="http://localhost:4000/layout/uncategorized/layout-header-image-horizontal/"><![CDATA[<p>This post should display a <strong>header image</strong>, if the theme supports it.</p>

<p>Non-square images can provide some unique styling issues.</p>

<p>This post tests a horizontal header image</p>]]></content><author><name>Leoncio López</name><email>leobip27@gmail.com</email></author><category term="Layout" /><category term="Uncategorized" /><category term="edge case" /><category term="featured image" /><category term="image" /><category term="layout" /><summary type="html"><![CDATA[This post should display a header image, if the theme supports it.]]></summary></entry><entry><title type="html">Post: Image (Caption)</title><link href="http://localhost:4000/post%20formats/post-image-caption/" rel="alternate" type="text/html" title="Post: Image (Caption)" /><published>2010-08-07T00:00:00+02:00</published><updated>2010-08-07T00:00:00+02:00</updated><id>http://localhost:4000/post%20formats/post-image-caption</id><content type="html" xml:base="http://localhost:4000/post%20formats/post-image-caption/"><![CDATA[<figure>
  
<img src="/assets/images/unsplash-gallery-image-3.jpg" alt="Foo" />

  <figcaption>Photo from Unsplash.</figcaption>
</figure>]]></content><author><name>Leoncio López</name><email>leobip27@gmail.com</email></author><category term="Post Formats" /><category term="image" /><category term="Post Formats" /><summary type="html"><![CDATA[]]></summary></entry></feed>